import asyncio
import pandas as pd
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    FSInputFile,
)
from aiogram.filters import Command
from aiogram import F
from dotenv import load_dotenv
import os

# # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
# load_dotenv(".env")
# BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
# if not BOT_TOKEN:
#     raise ValueError("BOT_TOKEN is not set in the .env file!")

# # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä
# bot = Bot(token=BOT_TOKEN)
# router = Router()

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
# def create_feature_table(features):
#     table = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
#     for i, (key, value) in enumerate(features.items(), 1):
#         table += f"{i}. {key}: {value}\n"
#     return table

# @router.message(Command("start"))
# async def start_handler(message: types.Message):
    # """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # await message.answer(
    #     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üìä\n"
    #     "–í—ã –º–æ–∂–µ—Ç–µ:\n"
    #     "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
    #     "- –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª.\n"
    #     "- –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.\n\n"
    #     "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
    #     reply_markup=ReplyKeyboardMarkup(
    #         keyboard=[
    #             [KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV")],
    #             [KeyboardButton(text="üìã –ü–æ–º–æ—â—å (/help)")],
    #         ],
    #         resize_keyboard=True,
    #     ),
    # )

# @router.message(Command("help"))
# async def help_handler(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
#     await message.answer(
#         "üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
#         "- /start: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
#         "- /help: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.\n"
#         "- üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV: –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –±–æ—Ç –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª.\n\n"
#         "–í—ã –º–æ–∂–µ—Ç–µ:\n"
#         "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –∏ –±–æ—Ç –≤—ã–¥–µ–ª–∏—Ç –∏–∑ –Ω–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ (NER).\n"
#         "2Ô∏è‚É£ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.\n"
#         "3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.",
#     )

# @router.message(F.document.mime_type == "text/csv")
# async def handle_csv_upload(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–∞."""
#     document_id = message.document.file_id
#     file_path = await bot.download(document_id)
    
#     # –ß—Ç–µ–Ω–∏–µ CSV-—Ñ–∞–π–ª–∞
#     try:
#         data = pd.read_csv(file_path)
#         # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
#         data["Processed"] = data.iloc[:, 0].apply(lambda x: len(str(x)))
#         processed_file_path = "processed_data.csv"
#         data.to_csv(processed_file_path, index=False)
        
#         # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         await message.answer_document(
#             FSInputFile(processed_file_path),
#             caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤! üìÇ",
#         )
#     except Exception as e:
#         await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# @router.message()
# async def process_text(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
#     text = message.text
#     # –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
#     features = {"Name": "–ü—Ä–∏–º–µ—Ä", "Length": len(text), "Text": text[:20]}
    
#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
#     table = create_feature_table(features)
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
#         [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")],
#     ])
#     await message.answer(table, reply_markup=markup)

# @router.callback_query(lambda c: c.data in ["confirm", "edit"])
# async def handle_confirmation(callback_query: types.CallbackQuery):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
#     user_id = callback_query.from_user.id
#     if callback_query.data == "confirm":
#         await bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! ‚úÖ")
#     elif callback_query.data == "edit":
#         await bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ key:value.")
#     await callback_query.answer()

# async def set_bot_commands():
#     """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∞–Ω–¥ –≤ Telegram."""
#     commands = [
#         BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
#         BotCommand(command="/help", description="–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"),
#         BotCommand(command="/upload_csv", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª"),
#     ]
#     await bot.set_my_commands(commands)

# async def main():
#     dp = Dispatcher()
#     dp.include_router(router)

#     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∞–Ω–¥
#     await set_bot_commands()

#     # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())


import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.filters import Command
from dotenv import load_dotenv
import os
from datetime import datetime
import pandas as pd
from io import BytesIO

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv(".env")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set in the .env file!")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä
bot = Bot(token=BOT_TOKEN)
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
def create_beautiful_table(data):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    table = "üìã <b>–ò–∑–º–µ–Ω—è–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞:</b>\n"
    table += "---------------------------------\n"
    for key, value in data.items():
        table += f"<b>{key}:</b> {value}\n"
    table += "---------------------------------\n"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {key}", callback_data=f"edit_{key}")]
        for key in data
    ])
    return table, keyboard


@router.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üìä\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, –∞ –±–æ—Ç –≤—ã–¥–µ–ª–∏—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Å –ø–æ–º–æ—â—å—é –Ω–∏—Ö —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥–∏–∫—Ç.\n"
        "- –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª —É–∂–µ —Å —Ç–∞—Ä–≥–µ—Ç–æ–º.\n"
        "- –û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/help"), KeyboardButton(text="/table")],
                [KeyboardButton(text="/upload_csv")],
            ],
            resize_keyboard=True,
        ),
    )


@router.message(Command("help"))
async def help_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer(
        "üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "- /start: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "- /help: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.\n"
        "- /table: –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.\n"
        "- /upload_csv: –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É.\n"
        "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.",
    )


@router.message(Command("table"))
async def table_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /table."""
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {"MEAS_DT": "2024-01-01 12:00:00"}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table, keyboard = create_beautiful_table(user_data[user_id])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "üìù –í–∞—à–∞ –∏–∑–º–µ–Ω—è–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞. –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ `MEAS_DT`:\n\n" + table,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    


@router.callback_query(lambda c: c.data.startswith("edit_MEAS_DT"))
async def edit_column(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MEAS_DT."""
    user_id = callback_query.from_user.id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>MEAS_DT</b> (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS):",
        parse_mode="HTML",
    )
    await callback_query.answer()


@router.message(lambda message: True)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def handle_new_value(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è MEAS_DT."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç–∞–±–ª–∏—Ü—É
    if user_id not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /table.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.strptime(message.text, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_data[user_id]["MEAS_DT"] = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    table, keyboard = create_beautiful_table(user_data[user_id])
    await message.answer(
        "‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n" + table,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    print(user_data)

# –ú–æ–¥—É–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∫–∏ .csv

@router.message(Command("upload_csv"))
async def upload_csv_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV."""
    await message.answer(
        "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª."
    )


@router.message(lambda message: message.document)
async def process_csv_file(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞."""
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CSV
    if not document.file_name.endswith(".csv"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file = await bot.download(document)
    df = pd.read_csv(file)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    df["Processed"] = "Example"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    output = BytesIO()
    df.to_csv(output, index=False)
    output.seek(0)

    await bot.send_document(
        message.chat.id,
        document=types.InputFile(output, filename="processed_file.csv"),
        caption="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤.",
    )


async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∞–Ω–¥ –≤ Telegram."""
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/help", description="–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"),
        BotCommand(command="/table", description="–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é"),
        BotCommand(command="/upload_csv", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª"),
    ]
    await bot.set_my_commands(commands)


async def main():
    dp = Dispatcher()
    dp.include_router(router)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∞–Ω–¥
    await set_bot_commands()

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

